% 

function [xOut, yOut, iOut] = getQuasarAsml(rho1, rho2, rotation, numOfSamples)

import griddedPupilFill.*


% square sampling grid
x = linspace(-1, 1, numOfSamples);
y = linspace(-1, 1, numOfSamples);
[x, y] = meshgrid(x, y);

xOut = [];
yOut = [];
iOut = [];

angles = [0, 90, 180, 270] + rotation;
deltaAngle = angles(2) - angles(1);

for n = 1 : length(angles)
    
    
    angle1 = angles(n) + deltaAngle / 2;
    angle2 = angles(n) - deltaAngle / 2;
    
    poles = [...
        struct( ...
           'x', 0, ...
           'y', 0, ...
           'r', 1 ...
        ), ... % pupil
        struct( ...
            'x', rho2 * cos(angles(n) * pi / 180), ...
            'y', rho2 * sin(angles(n) * pi / 180), ...
            'r', 1 ...
        ), ... % central circle at pole angle rho2 offset
        struct( ...
            'x', rho1 * cos(angle1 * pi / 180), ...
            'y', rho1 * sin(angle1 * pi / 180), ...
            'r', 1 ...
        ), ... % counter clockwise from central rho1 offset
        struct( ...
            'x', rho1 * cos(angle2 * pi / 180), ...
            'y', rho1 * sin(angle2 * pi / 180), ...
            'r', 1 ...
        ) ... % clockwise from central rho1 offset
    ];

    int = getLogicalAndOfCircles(x, y, poles);

    index = int > 0.01;

    xOut = [xOut x(index)'];
    yOut = [yOut y(index)'];
    iOut = [iOut int(index)'];

end

return


% OLD WAY LESS ELEGANT

% quasar pole between 00:00 and 03:00

poles = [...
    struct( ...
       'x', 0, ...
       'y', 0, ...
       'r', 1 ...
    ), ... % pupil
    struct( ...
        'x', 0, ...
        'y', rho1, ...
        'r', 1 ...
    ), ...
    struct( ...
        'x', rho1, ...
        'y', 0, ...
        'r', 1 ...
    ), ...
    struct( ...
        'x', rho2/sqrt(2), ...
        'y', rho2/sqrt(2), ...
        'r', 1 ...
    ) ...
];

int = getLogicalAndOfCircles(x, y, poles);

index = int > 0.01;

xOut = [xOut x(index)'];
yOut = [yOut y(index)'];
iOut = [iOut int(index)'];




% quasar pole between 03:00 and 06:00

poles = [...
    struct( ...
       'x', 0, ...
       'y', 0, ...
       'r', 1 ...
    ), ... % pupil
    struct( ...
        'x', rho1, ...
        'y', 0, ...
        'r', 1 ...
    ), ...
    struct( ...
        'x', 0, ...
        'y', -rho1, ...
        'r', 1 ...
    ), ...
    struct( ...
        'x', rho2/sqrt(2), ...
        'y', -rho2/sqrt(2), ...
        'r', 1 ...
    ) ...
];

int = getLogicalAndOfCircles(x, y, poles);

index = int > 0.01;

xOut = [xOut x(index)'];
yOut = [yOut y(index)'];
iOut = [iOut int(index)'];


% quasar pole between 06:00 and 09:00

poles = [...
    struct( ...
       'x', 0, ...
       'y', 0, ...
       'r', 1 ...
    ), ... % pupil
    struct( ...
        'x', -rho1, ...
        'y', 0, ...
        'r', 1 ...
    ), ...
    struct( ...
        'x', 0, ...
        'y', -rho1, ...
        'r', 1 ...
    ), ...
    struct( ...
        'x', -rho2/sqrt(2), ...
        'y', -rho2/sqrt(2), ...
        'r', 1 ...
    ) ...
];

int = getLogicalAndOfCircles(x, y, poles);

index = int > 0.01;

xOut = [xOut x(index)'];
yOut = [yOut y(index)'];
iOut = [iOut int(index)'];


% quasar pole between 09:00 and 12:00

poles = [...
    struct( ...
       'x', 0, ...
       'y', 0, ...
       'r', 1 ...
    ), ... % pupil
    struct( ...
        'x', -rho1, ...
        'y', 0, ...
        'r', 1 ...
    ), ...
    struct( ...
        'x', 0, ...
        'y', rho1, ...
        'r', 1 ...
    ), ...
    struct( ...
        'x', -rho2/sqrt(2), ...
        'y', rho2/sqrt(2), ...
        'r', 1 ...
    ) ...
];

int = getLogicalAndOfCircles(x, y, poles);

index = int > 0.01;

xOut = [xOut x(index)'];
yOut = [yOut y(index)'];
iOut = [iOut int(index)'];












